-- TODO: TRIGGER DE AUTOINCREMENT PARA LA LLAVE
CREATE TABLE SEG_PERMISO(
    SEG_PERMISO		INTEGER				        NOT NULL,
    DESCRIPCION_ESP	VARCHAR2(256)		        NOT NULL,
    DESCRIPCION_ING	VARCHAR2(256)		        NOT NULL,
    
    CONSTRAINT	"SEG_PERMISO_PK" 		        PRIMARY KEY (SEG_PERMISO),

	CONSTRAINT	"DESCRIPCION_ESP_PER_REGEX"	    CHECK(REGEXP_LIKE(DESCRIPCION_ESP, '([a-zA-ZñÑáéíóúÁÉÍÓÚ]|\s)*')),
	CONSTRAINT	"DESCRIPCION_ING_PER_REGEX"	    CHECK(REGEXP_LIKE(DESCRIPCION_ING, '([a-zA-Z]|\s)*'))
);

-- TODO: TRIGGER QUE DEPENDIENTE DEL SEG_ROL LE PONGA NOMBRE_ROL
-- IMPORTANTE: ESTA TABLA ES NECESARIA? PUEDE SER INCLUIDA COMO ATRIBUTO EN USUARIO DEBIDO A RELACIÓN 1 A 1
CREATE TABLE SEG_ROL(
    SEG_ROL		INTEGER				            NOT NULL,
	NOMBRE_ROL	VARCHAR2(13)   		            NOT NULL,
	
    CONSTRAINT	"SEG_ROL_PK" 		            PRIMARY KEY (SEG_ROL),

	CONSTRAINT	"SEG_ROL_RANGE" 	            CHECK (SEG_ROL  BETWEEN 1 and 3),
	CONSTRAINT	"NOMBRE_ROL_ENUM" 	            CHECK(NOMBRE_ROL IN ('SuperUser','Administrator','Student'))
);

-- TODO: TRIGGER INCREMENTAL CON FORMATO REU, DONDE REU SON SIGLAS DEL PROGRAMA
CREATE TABLE PRO_PROGRAMA(
    PRO_PROGRAMA       VARCHAR2(3),             -- AL IGUAL QUE ROL ESTA TABLA PUEDE SER ABSORBIDA
    NOMBRE             VARCHAR2(20)		        NOT NULL,
    ACTIVO             CHAR(1)			        DEFAULT '1',
	
	CONSTRAINT	"PRO_PROGRAMA_PK" 		        PRIMARY KEY (PRO_PROGRAMA),
	CONSTRAINT 	"ACTIVO_PRO_BOOL" 			    CHECK(ACTIVO IN ('1','0'))
);

-- TRIGGER INCREMENTAL LLAVE
CREATE TABLE SOL_PREGUNTA(
    SOL_PREGUNTA        INTEGER,
    DESCRIPCION_ESP     VARCHAR2(256)           NOT NULL,
    DESCRIPCION_ING     VARCHAR2(256)		    NOT NULL,
    TIPO                INTEGER                 DEFAULT '1',
    REQUERIDO           CHAR(1)		            DEFAULT '1',
    ACTIVO              CHAR(1)                 DEFAULT '1',

    CONSTRAINT  "SOL_PREGUNTA_PK"               PRIMARY KEY (SOL_PREGUNTA),

    CONSTRAINT	"DESCRIPCION_ESP_PRE_REGEX"	    CHECK(REGEXP_LIKE(DESCRIPCION_ESP, '([a-zA-ZñÑáéíóúÁÉÍÓÚ]|\s)*')),
	CONSTRAINT	"DESCRIPCION_ING_PRE_REGEX"	    CHECK(REGEXP_LIKE(DESCRIPCION_ING, '([a-zA-Z]|\s)*')),
    CONSTRAINT  "TIPO_RANGE"                    CHECK(TIPO BETWEEN 1 AND 4),
    CONSTRAINT 	"REQUERIDO_PRE_BOOL" 		    CHECK(REQUERIDO IN ('1','0')),
    CONSTRAINT 	"ACTIVO_PRE_BOOL" 			    CHECK(ACTIVO IN ('1','0'))
);

-- TRIGGER INCREMENTAL LLAVE
CREATE TABLE SOL_FORMULARIO(
    SOL_FORMULARIO      INTEGER,
    ACTIVO              CHAR(1)                 DEFAULT '1',
    
    CONSTRAINT  "SOL_FORMULARIO_PK"             PRIMARY KEY (SOL_FORMULARIO),
    CONSTRAINT 	"ACTIVO_FOR_BOOL" 			    CHECK(ACTIVO IN ('1','0'))
);

CREATE TABLE SEG_POSEE(
    SEG_ROL     INTEGER, -- SI LA TABLA ROL ES ABSORBIDA, CAMBIAR POR PK DE USUARIO
    SEG_PERMISO INTEGER,

    CONSTRAINT 	"SEG_POSEE_PK" 		            PRIMARY KEY(SEG_ROL, SEG_PERMISO),
    CONSTRAINT 	"SEG_ROL_POS_FK" 		        FOREIGN KEY (SEG_ROL) REFERENCES SEG_ROL(SEG_ROL)
                                                    ON DELETE CASCADE,
    CONSTRAINT 	"SEG_PERMISO_POS_FK" 	        FOREIGN KEY (SEG_PERMISO) REFERENCES SEG_PERMISO(SEG_PERMISO)
                                                    ON DELETE CASCADE
);

-- TODO: TRIGGER DE AUTOINCREMENT PARA LA LLAVE si esta fuese autoincremental y no la cédula o id del usuario
CREATE TABLE SEG_USUARIO(
    SEG_USUARIO			INTEGER				    NOT NULL, -- No es un número incremental?
    NOMBRE				VARCHAR2(30)		    NOT NULL,
    APELLIDO_1			VARCHAR2(30)		    NOT NULL,
    APELLIDO_2			VARCHAR2(30),
    NOMBRE_USUARIO		VARCHAR2(256)		    NOT NULL,
    CONTRASENA			VARCHAR2(60)		    NOT NULL, -- Probar almacenarlo como RAW o BINARY
    CORREO				VARCHAR2(256)		    NOT NULL,
    NUMERO_TELEFONO		VARCHAR2(28)		    NOT NULL,
    NACIONALIDAD		VARCHAR2(20)		    NOT NULL,
    ACTIVO				CHAR(1)				    DEFAULT '1',
	SEG_ROL				INTEGER				    NOT NULL,
	CODIGO_RESTAURACION	VARCHAR2(15),
    
    CONSTRAINT	"SEG_USUARIO_PK" 			    PRIMARY KEY (SEG_USUARIO),
	CONSTRAINT 	"SEG_ROL_USU_FK"				FOREIGN KEY (SEG_ROL) REFERENCES SEG_ROL(SEG_ROL), -- VER LINEA 13
                                                --ON DELETE RESTRICT
	CONSTRAINT	"NOMBRE_USU_REGEX"				CHECK(REGEXP_LIKE(NOMBRE, '^[^±!@£$%^&*_+§¡€#¢§¶•ªº«\\/<>?:;|=.,]{1,30}$')),
	CONSTRAINT	"APELLIDO_1_USU_REGEX"			CHECK(REGEXP_LIKE(APELLIDO_1, '^[^±!@£$%^&*_+§¡€#¢§¶•ªº«\\/<>?:;|=.,]{1,30}$')),
	CONSTRAINT	"APELLIDO_2_USU_REGEX"			CHECK(REGEXP_LIKE(APELLIDO_2, '^[^±!@£$%^&*_+§¡€#¢§¶•ªº«\\/<>?:;|=.,]{0,30}$')),
	CONSTRAINT	"NOMBRE_USUARIO_USU_REGEX"		CHECK(REGEXP_LIKE(NOMBRE_USUARIO, '^[^±!@£$%^&*_+§¡€#¢§¶•ªº«\\/<>?:;|=.,]{1,30}$')),
	CONSTRAINT	"CONTRASENA_USU_REGEX"			CHECK(REGEXP_LIKE(CONTRASENA, '^[$./0-9a-zA-z]$')),
	CONSTRAINT	"CORREO_USU_REGEX"				CHECK(REGEXP_LIKE(CORREO, '^(([^\"\''\@\s\.\(\)\[\]\{\}\\\/,:;]+)\.)*\2@\2(\.\2)+$')),
	CONSTRAINT	"NUMERO_TELEFONO_USU_REGEX"		CHECK(REGEXP_LIKE(NUMERO_TELEFONO, '^(\d|-|+){7,28}$')),
	CONSTRAINT	"NACIONALIDAD_USU_REGEX"		CHECK(REGEXP_LIKE(NACIONALIDAD, '^([a-zA-Z]|\s)*$')),
	CONSTRAINT 	"ACTIVO_USU_BOOL" 				CHECK(ACTIVO IN ('1','0')),
	CONSTRAINT	"CODIGO_RESTAURACION_USU_REGEX"	CHECK(REGEXP_LIKE(CODIGO_RESTAURACION, '^\w{15}$'))
);

-- TRIGGER INCREMENTAL LLAVE
CREATE TABLE SOL_OPCIONES(
    SOL_OPCIONES        INTEGER,
    SOL_PREGUNTA        INTEGER,
    DESCRIPCION_ESP     VARCHAR2(256)           NOT NULL,
    DESCRIPCION_ING     VARCHAR2(256)		    NOT NULL,
    
    CONSTRAINT  "SOL_OPCIONES_PK"               PRIMARY KEY (SOL_OPCIONES, SOL_PREGUNTA),
    CONSTRAINT  "SOL_PREGUNTA_OPC_FK"           FOREIGN KEY (SOL_PREGUNTA) REFERENCES SOL_PREGUNTA(SOL_PREGUNTA)
		                                            ON DELETE CASCADE,
    
    CONSTRAINT	"DESCRIPCION_ESP_OPC_REGEX"	    CHECK(REGEXP_LIKE(DESCRIPCION_ESP, '([a-zA-ZñÑáéíóúÁÉÍÓÚ]|\s)*')),
	CONSTRAINT	"DESCRIPCION_ING_OPC_REGEX"	    CHECK(REGEXP_LIKE(DESCRIPCION_ING, '([a-zA-Z]|\s)*'))
);

CREATE TABLE SOL_CONTIENE(
	SOL_PREGUNTA        INTEGER,
	SOL_FORMULARIO      INTEGER,
	NUMERO_PREGUNTA     INTEGER                 NOT NULL,
	
    CONSTRAINT  "SOL_CONTIENE_PK"               PRIMARY KEY (SOL_PREGUNTA, SOL_FORMULARIO),
	CONSTRAINT  "SOL_PREGUNTA_CON_FK"           FOREIGN KEY (SOL_PREGUNTA) REFERENCES SOL_PREGUNTA(SOL_PREGUNTA),
		                                            -- ON DELETE RESTRICT,
    CONSTRAINT  "SOL_FORMULARIO_CON_FK"         FOREIGN KEY (SOL_FORMULARIO) REFERENCES SOL_FORMULARIO(SOL_FORMULARIO)
		                                            ON DELETE CASCADE
);

-- TRIGGER LLAVE CON EL FORMATO REU-CUR-ABR-2019 DONDE REU SON SIGLAS DEL PROGRAMA, CUR SON INICIALEZ DEL CURSO, ABR EL MES Y 2019 EL AÑO
CREATE TABLE PRO_CURSO(
    PRO_CURSO           INTEGER,
    SIGLA               VARCHAR(8)              NOT NULL,
    NOMBRE              VARCHAR(64)             NOT NULL,
    FECHA_INICIO        DATE                    NOT NULL,
    FECHA_FINALIZACION  DATE                    NOT NULL,
    FECHA_LIMITE        DATE                    NOT NULL,
    CREDITOS            INTEGER                 DEFAULT 4,
    IDIOMA              VARCHAR(16)             NOT NULL,
    LOCACION            VARCHAR(64)             NOT NULL,
    ACTIVO              CHAR(1)                 DEFAULT '1',
    PRO_PROGRAMA        VARCHAR2(3),
    SOL_FORMULARIO      INTEGER,
    SEG_USUARIO         INTEGER,

    CONSTRAINT  "PRO_CURSO_PK"                  PRIMARY KEY (PRO_CURSO),
    CONSTRAINT  "PRO_PROGRAMA_CUR_FK"           FOREIGN KEY (PRO_PROGRAMA) REFERENCES PRO_PROGRAMA(PRO_PROGRAMA),
		                                            -- ON DELETE RESTRICT?,
    CONSTRAINT  "SOL_FORMULARIO_CUR_FK"         FOREIGN KEY (SOL_FORMULARIO) REFERENCES SOL_FORMULARIO(SOL_FORMULARIO)
		                                            ON DELETE SET NULL,
    CONSTRAINT  "SEG_USUARIO_CUR_FK"            FOREIGN KEY (SEG_USUARIO) REFERENCES SEG_USUARIO(SEG_USUARIO),
		                                            -- ON DELETE RESTRICT, ESTE USUARIO ES EL ADMIN DEL CURSO

    CONSTRAINT	"SIGLA_CUR_REGEX"	            CHECK(REGEXP_LIKE(SIGLA, '([a-zA-Z0-9]|\s){8}')),
    CONSTRAINT	"NOMBRE_CUR_REGEX"	            CHECK(REGEXP_LIKE(NOMBRE, '([a-zA-ZñÑáéíóúÁÉÍÓÚ]|\s)*')),
    CONSTRAINT  "CREDITOS_CUR_RANGE"            CHECK(CREDITOS > 0),
    CONSTRAINT	"IDIOMA_CUR_REGEX"	            CHECK(REGEXP_LIKE(IDIOMA, '([a-zA-ZñÑáéíóúÁÉÍÓÚ]|\s)*')),
    CONSTRAINT	"LOCACION_CUR_REGEX"	        CHECK(REGEXP_LIKE(LOCACION, '([a-zA-ZñÑáéíóúÁÉÍÓÚ]|\s)*')),
    CONSTRAINT 	"ACTIVO_CUR_BOOL" 			    CHECK(ACTIVO IN ('1','0'))
);

-- TRIGGER INCREMENTAL LLAVE
CREATE TABLE SOL_SOLICITUD(
    SEG_USUARIO         INTEGER,
    PRO_CURSO           INTEGER,
    RESULTADO           CHAR(1)                 DEFAULT 'P', -- RECHAZADO R, PROCESO P, ACEPTADO A
    ACTIVO              CHAR(1)                 DEFAULT '1',
    
    CONSTRAINT  "SOL_SOLICITUD_PK"              PRIMARY KEY (SEG_USUARIO,PRO_CURSO),
    CONSTRAINT  "SEG_USUARIO_SOL_FK"            FOREIGN KEY (SEG_USUARIO) REFERENCES SEG_USUARIO(SEG_USUARIO)
                                                    ON DELETE CASCADE, -- DEBERÍAN SER RESTRICT? 
    CONSTRAINT  "PRO_CURSO_SOL_FK"              FOREIGN KEY (PRO_CURSO) REFERENCES PRO_CURSO(PRO_CURSO)
                                                    ON DELETE CASCADE, -- DEBERÍAN SER RESTRICT?

    CONSTRAINT  "RESULTADO_ENUM"                CHECK(RESULTADO IN ('P','R','A')),
    CONSTRAINT 	"ACTIVO_SOL_BOOL" 			    CHECK(ACTIVO IN ('1','0'))
);

CREATE TABLE PRO_ASISTE(
    SEG_USUARIO        INTEGER,
    PRO_CURSO          INTEGER,
	ESTADO		       CHAR(1)		            DEFAULT '1',		
    
    CONSTRAINT  "PRO_ASISTE_PK"                 PRIMARY KEY (SEG_USUARIO, PRO_CURSO),
    CONSTRAINT  "SEG_USUARIO_ASI_FK"            FOREIGN KEY (SEG_USUARIO) REFERENCES SEG_USUARIO(SEG_USUARIO)
		                                            ON DELETE CASCADE,
    CONSTRAINT  "PRO_CURSO_ASI_FK"              FOREIGN KEY (PRO_CURSO) REFERENCES PRO_CURSO(PRO_CURSO),
                                                    --ON DELETE RESTRICT,
    CONSTRAINT 	"ESTADO_ASI_BOOL" 			    CHECK(ESTADO IN ('1','0'))  -- 1 ASISTE , 0 NO ASISTE
);